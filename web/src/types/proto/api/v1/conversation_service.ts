// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: api/v1/conversation_service.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Empty } from "../../google/protobuf/empty";
import { Timestamp } from "../../google/protobuf/timestamp";
import { Attachment } from "./attachment_service";

export const protobufPackage = "memos.api.v1";

export interface Conversation {
  /** uid: conversations/{uid} */
  uid: string;
  title: string;
  creatorId: number;
  messageCount: number;
  lastMessageAt?: Date | undefined;
  createTime?: Date | undefined;
  updateTime?: Date | undefined;
}

export interface Message {
  /** uid: messages/{uid} */
  uid: string;
  /** conversation: conversations/{uid} */
  conversation: string;
  /** role: user or assistant */
  role: string;
  content: string;
  attachments: Attachment[];
  createTime?: Date | undefined;
}

export interface CreateConversationRequest {
  title: string;
}

export interface GetActiveConversationRequest {
  /** create_if_not_exists: If true, create a new conversation if none exists. */
  createIfNotExists: boolean;
}

export interface SendMessageRequest {
  /** conversation: conversations/{uid} */
  conversation: string;
  content: string;
  /** attachments: List of attachment UIDs */
  attachments: string[];
  /** agent_id: Specific AI agent to use (optional, uses default if not specified) */
  agentId: string;
}

export interface SendMessageChunk {
  type: SendMessageChunk_ChunkType;
  /** message: Full message for USER_MESSAGE and ASSISTANT_END */
  message?:
    | Message
    | undefined;
  /** content_delta: Content chunk for ASSISTANT_CONTENT */
  contentDelta: string;
  /** error: Error message for ERROR type */
  error: string;
}

export enum SendMessageChunk_ChunkType {
  CHUNK_TYPE_UNSPECIFIED = "CHUNK_TYPE_UNSPECIFIED",
  /** USER_MESSAGE - 用户消息已保存 */
  USER_MESSAGE = "USER_MESSAGE",
  /** ASSISTANT_START - AI开始回复 */
  ASSISTANT_START = "ASSISTANT_START",
  /** ASSISTANT_CONTENT - AI内容chunk */
  ASSISTANT_CONTENT = "ASSISTANT_CONTENT",
  /** ASSISTANT_END - AI回复完成 */
  ASSISTANT_END = "ASSISTANT_END",
  /** ERROR - 错误 */
  ERROR = "ERROR",
  UNRECOGNIZED = "UNRECOGNIZED",
}

export function sendMessageChunk_ChunkTypeFromJSON(object: any): SendMessageChunk_ChunkType {
  switch (object) {
    case 0:
    case "CHUNK_TYPE_UNSPECIFIED":
      return SendMessageChunk_ChunkType.CHUNK_TYPE_UNSPECIFIED;
    case 1:
    case "USER_MESSAGE":
      return SendMessageChunk_ChunkType.USER_MESSAGE;
    case 2:
    case "ASSISTANT_START":
      return SendMessageChunk_ChunkType.ASSISTANT_START;
    case 3:
    case "ASSISTANT_CONTENT":
      return SendMessageChunk_ChunkType.ASSISTANT_CONTENT;
    case 4:
    case "ASSISTANT_END":
      return SendMessageChunk_ChunkType.ASSISTANT_END;
    case 5:
    case "ERROR":
      return SendMessageChunk_ChunkType.ERROR;
    case -1:
    case "UNRECOGNIZED":
    default:
      return SendMessageChunk_ChunkType.UNRECOGNIZED;
  }
}

export function sendMessageChunk_ChunkTypeToNumber(object: SendMessageChunk_ChunkType): number {
  switch (object) {
    case SendMessageChunk_ChunkType.CHUNK_TYPE_UNSPECIFIED:
      return 0;
    case SendMessageChunk_ChunkType.USER_MESSAGE:
      return 1;
    case SendMessageChunk_ChunkType.ASSISTANT_START:
      return 2;
    case SendMessageChunk_ChunkType.ASSISTANT_CONTENT:
      return 3;
    case SendMessageChunk_ChunkType.ASSISTANT_END:
      return 4;
    case SendMessageChunk_ChunkType.ERROR:
      return 5;
    case SendMessageChunk_ChunkType.UNRECOGNIZED:
    default:
      return -1;
  }
}

export interface ListMessagesRequest {
  /** conversation: conversations/{uid} */
  conversation: string;
  pageSize: number;
  pageToken: string;
}

export interface ListMessagesResponse {
  messages: Message[];
  nextPageToken: string;
}

export interface DeleteConversationRequest {
  /** name: conversations/{uid} */
  name: string;
}

function createBaseConversation(): Conversation {
  return {
    uid: "",
    title: "",
    creatorId: 0,
    messageCount: 0,
    lastMessageAt: undefined,
    createTime: undefined,
    updateTime: undefined,
  };
}

export const Conversation: MessageFns<Conversation> = {
  encode(message: Conversation, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.creatorId !== 0) {
      writer.uint32(24).int32(message.creatorId);
    }
    if (message.messageCount !== 0) {
      writer.uint32(32).int32(message.messageCount);
    }
    if (message.lastMessageAt !== undefined) {
      Timestamp.encode(toTimestamp(message.lastMessageAt), writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    if (message.updateTime !== undefined) {
      Timestamp.encode(toTimestamp(message.updateTime), writer.uint32(58).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Conversation {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseConversation();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.creatorId = reader.int32();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.messageCount = reader.int32();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.lastMessageAt = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.updateTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Conversation>): Conversation {
    return Conversation.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Conversation>): Conversation {
    const message = createBaseConversation();
    message.uid = object.uid ?? "";
    message.title = object.title ?? "";
    message.creatorId = object.creatorId ?? 0;
    message.messageCount = object.messageCount ?? 0;
    message.lastMessageAt = object.lastMessageAt ?? undefined;
    message.createTime = object.createTime ?? undefined;
    message.updateTime = object.updateTime ?? undefined;
    return message;
  },
};

function createBaseMessage(): Message {
  return { uid: "", conversation: "", role: "", content: "", attachments: [], createTime: undefined };
}

export const Message: MessageFns<Message> = {
  encode(message: Message, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.uid !== "") {
      writer.uint32(10).string(message.uid);
    }
    if (message.conversation !== "") {
      writer.uint32(18).string(message.conversation);
    }
    if (message.role !== "") {
      writer.uint32(26).string(message.role);
    }
    if (message.content !== "") {
      writer.uint32(34).string(message.content);
    }
    for (const v of message.attachments) {
      Attachment.encode(v!, writer.uint32(42).fork()).join();
    }
    if (message.createTime !== undefined) {
      Timestamp.encode(toTimestamp(message.createTime), writer.uint32(50).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Message {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.uid = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.conversation = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.role = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.attachments.push(Attachment.decode(reader, reader.uint32()));
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<Message>): Message {
    return Message.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<Message>): Message {
    const message = createBaseMessage();
    message.uid = object.uid ?? "";
    message.conversation = object.conversation ?? "";
    message.role = object.role ?? "";
    message.content = object.content ?? "";
    message.attachments = object.attachments?.map((e) => Attachment.fromPartial(e)) || [];
    message.createTime = object.createTime ?? undefined;
    return message;
  },
};

function createBaseCreateConversationRequest(): CreateConversationRequest {
  return { title: "" };
}

export const CreateConversationRequest: MessageFns<CreateConversationRequest> = {
  encode(message: CreateConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<CreateConversationRequest>): CreateConversationRequest {
    return CreateConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<CreateConversationRequest>): CreateConversationRequest {
    const message = createBaseCreateConversationRequest();
    message.title = object.title ?? "";
    return message;
  },
};

function createBaseGetActiveConversationRequest(): GetActiveConversationRequest {
  return { createIfNotExists: false };
}

export const GetActiveConversationRequest: MessageFns<GetActiveConversationRequest> = {
  encode(message: GetActiveConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.createIfNotExists !== false) {
      writer.uint32(8).bool(message.createIfNotExists);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetActiveConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetActiveConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.createIfNotExists = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<GetActiveConversationRequest>): GetActiveConversationRequest {
    return GetActiveConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<GetActiveConversationRequest>): GetActiveConversationRequest {
    const message = createBaseGetActiveConversationRequest();
    message.createIfNotExists = object.createIfNotExists ?? false;
    return message;
  },
};

function createBaseSendMessageRequest(): SendMessageRequest {
  return { conversation: "", content: "", attachments: [], agentId: "" };
}

export const SendMessageRequest: MessageFns<SendMessageRequest> = {
  encode(message: SendMessageRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversation !== "") {
      writer.uint32(10).string(message.conversation);
    }
    if (message.content !== "") {
      writer.uint32(18).string(message.content);
    }
    for (const v of message.attachments) {
      writer.uint32(26).string(v!);
    }
    if (message.agentId !== "") {
      writer.uint32(34).string(message.agentId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversation = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.content = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.attachments.push(reader.string());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.agentId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendMessageRequest>): SendMessageRequest {
    return SendMessageRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendMessageRequest>): SendMessageRequest {
    const message = createBaseSendMessageRequest();
    message.conversation = object.conversation ?? "";
    message.content = object.content ?? "";
    message.attachments = object.attachments?.map((e) => e) || [];
    message.agentId = object.agentId ?? "";
    return message;
  },
};

function createBaseSendMessageChunk(): SendMessageChunk {
  return { type: SendMessageChunk_ChunkType.CHUNK_TYPE_UNSPECIFIED, message: undefined, contentDelta: "", error: "" };
}

export const SendMessageChunk: MessageFns<SendMessageChunk> = {
  encode(message: SendMessageChunk, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.type !== SendMessageChunk_ChunkType.CHUNK_TYPE_UNSPECIFIED) {
      writer.uint32(8).int32(sendMessageChunk_ChunkTypeToNumber(message.type));
    }
    if (message.message !== undefined) {
      Message.encode(message.message, writer.uint32(18).fork()).join();
    }
    if (message.contentDelta !== "") {
      writer.uint32(26).string(message.contentDelta);
    }
    if (message.error !== "") {
      writer.uint32(34).string(message.error);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): SendMessageChunk {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSendMessageChunk();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.type = sendMessageChunk_ChunkTypeFromJSON(reader.int32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.message = Message.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.contentDelta = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.error = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<SendMessageChunk>): SendMessageChunk {
    return SendMessageChunk.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<SendMessageChunk>): SendMessageChunk {
    const message = createBaseSendMessageChunk();
    message.type = object.type ?? SendMessageChunk_ChunkType.CHUNK_TYPE_UNSPECIFIED;
    message.message = (object.message !== undefined && object.message !== null)
      ? Message.fromPartial(object.message)
      : undefined;
    message.contentDelta = object.contentDelta ?? "";
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseListMessagesRequest(): ListMessagesRequest {
  return { conversation: "", pageSize: 0, pageToken: "" };
}

export const ListMessagesRequest: MessageFns<ListMessagesRequest> = {
  encode(message: ListMessagesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.conversation !== "") {
      writer.uint32(10).string(message.conversation);
    }
    if (message.pageSize !== 0) {
      writer.uint32(16).int32(message.pageSize);
    }
    if (message.pageToken !== "") {
      writer.uint32(26).string(message.pageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMessagesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMessagesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.conversation = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.pageSize = reader.int32();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.pageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListMessagesRequest>): ListMessagesRequest {
    return ListMessagesRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMessagesRequest>): ListMessagesRequest {
    const message = createBaseListMessagesRequest();
    message.conversation = object.conversation ?? "";
    message.pageSize = object.pageSize ?? 0;
    message.pageToken = object.pageToken ?? "";
    return message;
  },
};

function createBaseListMessagesResponse(): ListMessagesResponse {
  return { messages: [], nextPageToken: "" };
}

export const ListMessagesResponse: MessageFns<ListMessagesResponse> = {
  encode(message: ListMessagesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.messages) {
      Message.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.nextPageToken !== "") {
      writer.uint32(18).string(message.nextPageToken);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListMessagesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListMessagesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.messages.push(Message.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.nextPageToken = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<ListMessagesResponse>): ListMessagesResponse {
    return ListMessagesResponse.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<ListMessagesResponse>): ListMessagesResponse {
    const message = createBaseListMessagesResponse();
    message.messages = object.messages?.map((e) => Message.fromPartial(e)) || [];
    message.nextPageToken = object.nextPageToken ?? "";
    return message;
  },
};

function createBaseDeleteConversationRequest(): DeleteConversationRequest {
  return { name: "" };
}

export const DeleteConversationRequest: MessageFns<DeleteConversationRequest> = {
  encode(message: DeleteConversationRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteConversationRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteConversationRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  create(base?: DeepPartial<DeleteConversationRequest>): DeleteConversationRequest {
    return DeleteConversationRequest.fromPartial(base ?? {});
  },
  fromPartial(object: DeepPartial<DeleteConversationRequest>): DeleteConversationRequest {
    const message = createBaseDeleteConversationRequest();
    message.name = object.name ?? "";
    return message;
  },
};

export type ConversationServiceDefinition = typeof ConversationServiceDefinition;
export const ConversationServiceDefinition = {
  name: "ConversationService",
  fullName: "memos.api.v1.ConversationService",
  methods: {
    /** CreateConversation creates a new conversation. */
    createConversation: {
      name: "CreateConversation",
      requestType: CreateConversationRequest,
      requestStream: false,
      responseType: Conversation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              26,
              58,
              1,
              42,
              34,
              21,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
            ]),
          ],
        },
      },
    },
    /** GetActiveConversation gets the active (most recent) conversation for the current user. */
    getActiveConversation: {
      name: "GetActiveConversation",
      requestType: GetActiveConversationRequest,
      requestStream: false,
      responseType: Conversation,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              30,
              18,
              28,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              97,
              99,
              116,
              105,
              118,
              101,
            ]),
          ],
        },
      },
    },
    /** SendMessage sends a message and streams back AI response chunks. */
    sendMessage: {
      name: "SendMessage",
      requestType: SendMessageRequest,
      requestStream: false,
      responseType: SendMessageChunk,
      responseStream: true,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              57,
              58,
              1,
              42,
              34,
              52,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              61,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
              58,
              115,
              101,
              110,
              100,
            ]),
          ],
        },
      },
    },
    /** ListMessages lists messages in a conversation. */
    listMessages: {
      name: "ListMessages",
      requestType: ListMessagesRequest,
      requestStream: false,
      responseType: ListMessagesResponse,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              49,
              18,
              47,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              123,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              61,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
              47,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              115,
            ]),
          ],
        },
      },
    },
    /** DeleteConversation deletes a conversation. */
    deleteConversation: {
      name: "DeleteConversation",
      requestType: DeleteConversationRequest,
      requestStream: false,
      responseType: Empty,
      responseStream: false,
      options: {
        _unknownFields: {
          578365826: [
            new Uint8Array([
              32,
              42,
              30,
              47,
              97,
              112,
              105,
              47,
              118,
              49,
              47,
              123,
              110,
              97,
              109,
              101,
              61,
              99,
              111,
              110,
              118,
              101,
              114,
              115,
              97,
              116,
              105,
              111,
              110,
              115,
              47,
              42,
              125,
            ]),
          ],
        },
      },
    },
  },
} as const;

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  create(base?: DeepPartial<T>): T;
  fromPartial(object: DeepPartial<T>): T;
}
