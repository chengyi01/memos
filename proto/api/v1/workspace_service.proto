syntax = "proto3";

package memos.api.v1;

import "google/api/annotations.proto";
import "google/api/client.proto";
import "google/api/field_behavior.proto";
import "google/api/resource.proto";
import "google/protobuf/field_mask.proto";

option go_package = "gen/api/v1";

service WorkspaceService {
  // Gets the workspace profile.
  rpc GetWorkspaceProfile(GetWorkspaceProfileRequest) returns (WorkspaceProfile) {
    option (google.api.http) = {get: "/api/v1/workspace/profile"};
  }

  // Gets a workspace setting.
  rpc GetWorkspaceSetting(GetWorkspaceSettingRequest) returns (WorkspaceSetting) {
    option (google.api.http) = {get: "/api/v1/{name=workspace/settings/*}"};
    option (google.api.method_signature) = "name";
  }

  // Updates a workspace setting.
  rpc UpdateWorkspaceSetting(UpdateWorkspaceSettingRequest) returns (WorkspaceSetting) {
    option (google.api.http) = {
      patch: "/api/v1/{setting.name=workspace/settings/*}"
      body: "setting"
    };
    option (google.api.method_signature) = "setting,update_mask";
  }

  // Tests the connection to a specific AI agent.
  rpc TestAIAgent(TestAIAgentRequest) returns (TestAIAgentResponse) {
    option (google.api.http) = {
      post: "/api/v1/workspace/ai/test-agent"
      body: "*"
    };
  }
}

// Workspace profile message containing basic workspace information.
message WorkspaceProfile {
  // The name of instance owner.
  // Format: users/{user}
  string owner = 1;

  // Version is the current version of instance.
  string version = 2;

  // Mode is the instance mode (e.g. "prod", "dev" or "demo").
  string mode = 3;

  // Instance URL is the URL of the instance.
  string instance_url = 6;
}

// Request for workspace profile.
message GetWorkspaceProfileRequest {}

// A workspace setting resource.
message WorkspaceSetting {
  option (google.api.resource) = {
    type: "api.memos.dev/WorkspaceSetting"
    pattern: "workspace/settings/{setting}"
    singular: "workspaceSetting"
    plural: "workspaceSettings"
  };

  // The name of the workspace setting.
  // Format: workspace/settings/{setting}
  string name = 1 [(google.api.field_behavior) = IDENTIFIER];

  oneof value {
    GeneralSetting general_setting = 2;
    StorageSetting storage_setting = 3;
    MemoRelatedSetting memo_related_setting = 4;
    AISetting ai_setting = 5;
  }

  // Enumeration of workspace setting keys.
  enum Key {
    KEY_UNSPECIFIED = 0;
    // GENERAL is the key for general settings.
    GENERAL = 1;
    // STORAGE is the key for storage settings.
    STORAGE = 2;
    // MEMO_RELATED is the key for memo related settings.
    MEMO_RELATED = 3;
    // AI is the key for AI agent settings.
    AI = 4;
  }

  // General workspace settings configuration.
  message GeneralSetting {
    // theme is the name of the selected theme.
    // This references a CSS file in the web/public/themes/ directory.
    string theme = 1;
    // disallow_user_registration disallows user registration.
    bool disallow_user_registration = 2;
    // disallow_password_auth disallows password authentication.
    bool disallow_password_auth = 3;
    // additional_script is the additional script.
    string additional_script = 4;
    // additional_style is the additional style.
    string additional_style = 5;
    // custom_profile is the custom profile.
    CustomProfile custom_profile = 6;
    // week_start_day_offset is the week start day offset from Sunday.
    // 0: Sunday, 1: Monday, 2: Tuesday, 3: Wednesday, 4: Thursday, 5: Friday, 6: Saturday
    // Default is Sunday.
    int32 week_start_day_offset = 7;

    // disallow_change_username disallows changing username.
    bool disallow_change_username = 8;
    // disallow_change_nickname disallows changing nickname.
    bool disallow_change_nickname = 9;

    // Custom profile configuration for workspace branding.
    message CustomProfile {
      string title = 1;
      string description = 2;
      string logo_url = 3;
      string locale = 4;
    }
  }

  // Storage configuration settings for workspace attachments.
  message StorageSetting {
    // Storage type enumeration for different storage backends.
    enum StorageType {
      STORAGE_TYPE_UNSPECIFIED = 0;
      // DATABASE is the database storage type.
      DATABASE = 1;
      // LOCAL is the local storage type.
      LOCAL = 2;
      // S3 is the S3 storage type.
      S3 = 3;
      // ALIYUN_OSS is the Aliyun OSS storage type.
      ALIYUN_OSS = 4;
    }
    // storage_type is the storage type.
    StorageType storage_type = 1;
    // The template of file path.
    // e.g. assets/{timestamp}_{filename}
    string filepath_template = 2;
    // The max upload size in megabytes.
    int64 upload_size_limit_mb = 3;

    // S3 configuration for cloud storage backend.
    // Reference: https://developers.cloudflare.com/r2/examples/aws/aws-sdk-go/
    message S3Config {
      string access_key_id = 1;
      string access_key_secret = 2;
      string endpoint = 3;
      string region = 4;
      string bucket = 5;
      bool use_path_style = 6;
    }
    // The S3 config.
    S3Config s3_config = 4;

    // OSS configuration for Aliyun OSS storage backend.
    message OSSConfig {
      string endpoint = 1;
      string region = 2;
      string access_key_id = 3;
      string access_key_secret = 4;
      string bucket = 5;
      bool use_ssl = 6;
    }
    // The OSS config.
    OSSConfig oss_config = 5;
  }

  // Memo-related workspace settings and policies.
  message MemoRelatedSetting {
    // disallow_public_visibility disallows set memo as public visibility.
    bool disallow_public_visibility = 1;
    // display_with_update_time orders and displays memo with update time.
    bool display_with_update_time = 2;
    // content_length_limit is the limit of content length. Unit is byte.
    int32 content_length_limit = 3;
    // enable_double_click_edit enables editing on double click.
    bool enable_double_click_edit = 4;
    // enable_link_preview enables links preview.
    bool enable_link_preview = 5;
    // reactions is the list of reactions.
    repeated string reactions = 7;
    // disable_markdown_shortcuts disallow the registration of markdown shortcuts.
    bool disable_markdown_shortcuts = 8;
    // enable_blur_nsfw_content enables blurring of content marked as not safe for work (NSFW).
    bool enable_blur_nsfw_content = 9;
    // nsfw_tags is the list of tags that mark content as NSFW for blurring.
    repeated string nsfw_tags = 10;
  }

  // AI workspace settings for Alibaba Cloud Bailian integration.
  message AISetting {
    // api_key is the Bailian API Key.
    string api_key = 1;
    // endpoint is the API endpoint (default: https://dashscope.aliyuncs.com/api/v1).
    string endpoint = 2;
    // temperature is the default temperature (0.0-2.0).
    double temperature = 3;
    // max_tokens is the default max tokens per response.
    int32 max_tokens = 4;
    // enabled indicates whether AI feature is enabled.
    bool enabled = 5;
    // agents is the list of available AI agents.
    repeated AIAgent agents = 6;
    // default_agent_id is the default agent ID to use.
    string default_agent_id = 7;

    // AIAgent represents a single AI agent configuration.
    message AIAgent {
      // id is the unique identifier (agent_id from Bailian).
      string id = 1;
      // name is the display name of the agent.
      string name = 2;
      // description is the description/note about the agent.
      string description = 3;
      // created_ts is the creation timestamp.
      int64 created_ts = 4;
    }
  }
}

// Request message for GetWorkspaceSetting method.
message GetWorkspaceSettingRequest {
  // The resource name of the workspace setting.
  // Format: workspace/settings/{setting}
  string name = 1 [
    (google.api.field_behavior) = REQUIRED,
    (google.api.resource_reference) = {type: "api.memos.dev/WorkspaceSetting"}
  ];
}

// Request message for UpdateWorkspaceSetting method.
message UpdateWorkspaceSettingRequest {
  // The workspace setting resource which replaces the resource on the server.
  WorkspaceSetting setting = 1 [(google.api.field_behavior) = REQUIRED];

  // The list of fields to update.
  google.protobuf.FieldMask update_mask = 2 [(google.api.field_behavior) = OPTIONAL];
}

// Request message for TestAIAgent method.
message TestAIAgentRequest {
  // api_key is the Bailian API Key to test.
  string api_key = 1 [(google.api.field_behavior) = REQUIRED];
  // endpoint is the API endpoint (e.g., "dashscope.aliyuncs.com").
  string endpoint = 2 [(google.api.field_behavior) = REQUIRED];
  // agent_id is the specific agent ID to test.
  string agent_id = 3 [(google.api.field_behavior) = REQUIRED];
}

// Response message for TestAIAgent method.
message TestAIAgentResponse {
  // success indicates whether the test passed.
  bool success = 1;
  // message contains the test result message.
  string message = 2;
  // latency_ms is the test latency in milliseconds (optional).
  int32 latency_ms = 3;
}
